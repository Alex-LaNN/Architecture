<script>
  // Submitting form data to the server to add a new book.
  function addBook() {
    const checkedAllFieldsOk = true;
    // Enumeration of all required form fields.
    const requiredFields = document.querySelectorAll(
      "input[required], textarea[required]"
    );
    // Check to see if all fields are filled in.
    for (const field of requiredFields) {
      if (field.value === "") {
        // Display a message asking you to fill in an empty field.
        alert(
          `Поле "${field.name}" обязательно для заполнения. Пожалуйста заполните его перед добавлением новой книги.`
        );
        checkedAllFieldsOk = false;
        break;
      }
    }
    if (checkedAllFieldsOk) {
      // List of form field names to be sent to the server.
      const formInputs = [
        "name",
        "year",
        "pages",
        "author1",
        "author2",
        "author3",
        "author4",
        "author5",
        "description",
      ];
      // Retrieving an image object.
      const image = document.getElementById("imageFile");
      // Create a 'FormData' object to submit form data.
      const formData = new FormData();
      // Adding an image to the 'FormData' object.
      formData.append("image", image.files[0]);
      // Adding all other form fields to the 'FormData' object.
      formInputs.forEach((input) => {
        formData.append(input, document.getElementById(input).value);
      });
      // Sending a POST request to the server with form data.
      fetch(`http://localhost:3000/admin/api/v1/add_book`, {
        method: "POST",
        body: formData,
      })
        // Handling a successful response from the server.
        .then((res) => res.json())
        .then((response) => {
          // Display a modal window with the result of the operation.
          showModal(response);
        })
        .catch((error) => {
          console.error("39 Error:", error);
        });
    }
  }

  // Deleting a book.
  function deleteBook(bookId) {
    if (confirm("Вы уверены, что хотите удалить книгу?")) {
      fetch(`http://localhost:3000/admin/api/v1/delete_book/${bookId}`, {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
      })
        // Handling a successful response from the server.
        .then((res) => res.json())
        .then((response) => {
          // Display a modal window with the result of the operation.
          showModal(response);
        })
        .catch((error) => {
          console.error("Error:", error);
        });
    }
  }

  // Cancel deletion of a book.
  function recoverBook(bookId) {
    if (confirm("Хотите таки попробовать восстановить книгу?")) {
      fetch(`http://localhost:3000/admin/api/v1/recover_book/${bookId}`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
        },
      })
        // Handling a successful response from the server.
        .then((res) => res.json())
        .then((response) => {
          // Display a modal window with the result of the operation.
          showModal(response);
        });
    }
  }

  // Display a modal window with the result of the operation.
  function showModal(response) {
    // ID of the modal window.
    const modal = document.getElementById("successAlert");
    // Modal window content element.
    const modalContent = modal.querySelector(".modal-content");
    // Modal window message element.
    const modalMessage = modal.querySelector(".modal-message");
    // The background color of the modal window depending on the result of the operation.
    if (response.success) {
      modalContent.style.backgroundColor = "#d4edda";
    } else {
      modalContent.style.backgroundColor = "#f8d7da";
    }
    // Fill the modal window with a message.
    modalMessage.textContent = response.message;
    // Display a modal window.
    modal.style.display = "block";
    // Closing the modal window after 2 seconds.
    setTimeout(() => {
      location.reload();
      modal.style.display = "none";
    }, 2000);
  }

  // Logout..
  function logout() {
    // Retrieving credentials from local storage.
    const value = localStorage.getItem("credentials");
    // Sending a request to a protected route.
    fetch("/logout", {
      method: "GET",
      headers: {
        // 'Authorization' header with credentials.
        Authorization: "Basic YWRtaW46cGFzcw==",
      },
    })
      .then((response) => {
        // Handling successful exit.
        if (response.ok) {
          // Redirect to the main unprotected page.
          window.location.href = "/";
        } else {
          console.error(`error: ${response.statusText}`);
        }
      })
      .catch((error) => {
        console.error(`error: ${error}`);
      });
  }
</script>
